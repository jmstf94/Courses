{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2828a40a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import math as m\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "from scipy.stats import powerlaw\n",
    "import time\n",
    "aem = 1740"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "669a4788",
   "metadata": {},
   "source": [
    "# Problem 1-solved"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "116a6927",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD8CAYAAAB5Pm/hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAf10lEQVR4nO3deXRc5Znn8e8jlRbLtmRblkrebRkvKpsAibxBAgZUhBASyDI9Jks33Rlop0OSTiYDZHo6pydNzqRnkm4IIeEwAZLpZJpJgABJQ8BmCTZbLBtMsORFtrEtQItlW7Ita3/njyo5slyyS3JV3apbv885dXzrLlXPe2T9dOutW0+Zcw4REfGvHK8LEBGR5FLQi4j4nIJeRMTnFPQiIj6noBcR8TkFvYiIzwW8LiCWqVOnurlz53pdhohIxti8efNB51xZrG1pGfRz586ltrbW6zJERDKGme0baZumbkREfE5BLyLicwp6ERGfU9CLiPicgl5ExOcU9CIiPueboO8fcLy8+yA7m496XYqISFrxTdD3DQxw089q+enLb3tdiohIWokr6M3sajPbYWYNZnZ7jO2rzazdzN6I3r41ZNskM3vYzLabWb2ZrUrkAAYVBHK5dGEZ6+uaGRjQl6mIiAw6a9CbWS5wD/ARIATcYGahGLtucM5dGL19e8j6u4DfOecWAxcA9QmoO6ZwKEjL0W7efKc9WU8hIpJx4jmjXw40OOf2OOd6gIeA6+J5cDMrBi4F7gdwzvU4546MsdazumJxObk5xrq6pmQ9hYhIxokn6GcAB4bcb4yuG26VmW01s6fMbEl0XSXQCjxoZq+b2U/MbHysJzGzm82s1sxqW1tbRzOGkyYV5bNs7mTW17WM6XgRET+KJ+gtxrrhk+BbgDnOuQuAu4HHousDwPuBHzvnLgKOA6fN8QM45+5zzlU756rLymI2YItLOFTBjuaj7G/rHPNjiIj4STxB3wjMGnJ/JvDu0B2ccx3OuWPR5SeBPDObGj220Tn3WnTXh4kEf9KEq4IAPKPpGxERIL6g3wQsMLN5ZpYPrAGeGLqDmVWYmUWXl0cft8051wQcMLNF0V2vBOoSVn0Ms0uLWBScyLq65mQ+jYhIxjhrP3rnXJ+Z3QI8DeQCDzjntpnZ2uj2e4FPA180sz7gBLDGOTc4vfNl4BfRPxJ7gL9MwjhOEQ4F+dELDRw+3sPk8fnJfjoRkbRmf8rj9FFdXe3O5YtHth44wnX3vMT3/8MFfOoDMxNYmYhIejKzzc656ljbfPPJ2KHOn1FCsLiA9fWavhER8WXQ5+QYNVVBfr+zla7efq/LERHxlC+DHiLz9J09/byyu83rUkREPOXboF81v5Tx+bk8o6tvRCTL+TboCwK5XLaojPX1anImItnNt0EPkemb1qPdbG084nUpIiKe8XXQX74o0uRMV9+ISDbzddBPKspn+dwp+pSsiGQ1Xwc9RKZvdjYfY1/bca9LERHxRFYEPaCzehHJWr4P+llTilhcMVGXWYpI1vJ90EPkrL727UMcOt7jdSkiIimXNUE/4OD57frmKRHJPlkR9OfPKKGiuFDz9CKSlbIi6M2MmlA5L+5SkzMRyT5ZEfQANVWRJmcv7z7odSkiIimVNUG/an4pEwoCmr4RkayTNUFfEMjlsoVlrK9vUZMzEckqWRP0oCZnIpKdsiroB5ucafpGRLJJVgV9SVEeK+apyZmIZJesCnqIXH2zq+UYbx9UkzMRyQ5ZF/RqciYi2Sbrgn6wyZmCXkSyRdYFPcBVoSC1+9TkTESyQ1YGfThUwYCD59TkTESyQFYG/dIZxdEmZ01elyIiknRZGfQnm5ztPKgmZyLie1kZ9BCZvjnR289LDWpyJiL+lrVBv7JyipqciUhWyNqgLwjkctkiNTkTEf/L2qCHyGWWB49184aanImIj2V10K9eWE5ATc5ExOeyOuhLivJYriZnIuJzWR30EOl909ByjL1qciYiPqWgP9nkTB+eEhF/yvqgnzm5iKppxayvUzsEEfGnrA96iJzVq8mZiPiVgp7IZZYDDp6t15uyIuI/cQW9mV1tZjvMrMHMbo+xfbWZtZvZG9Hbt4ZtzzWz183st4kqPJGWTC9mWkmhrr4REV8KnG0HM8sF7gHCQCOwycyecM7VDdt1g3Pu2hEe5qtAPVB8LsUmi5lRUxXk4c2NdPX2U5iX63VJIiIJE88Z/XKgwTm3xznXAzwEXBfvE5jZTOCjwE/GVmJqhENBTvT2s3GXmpyJiL/EE/QzgAND7jdG1w23ysy2mtlTZrZkyPo7gVuBgTM9iZndbGa1Zlbb2toaR1mJtbKylIkFAdZrnl5EfCaeoLcY64Z3AdsCzHHOXQDcDTwGYGbXAi3Ouc1nexLn3H3OuWrnXHVZWVkcZSVWfiBHTc5ExJfiCfpGYNaQ+zOBd4fu4JzrcM4diy4/CeSZ2VTgEuDjZvY2kSmfK8zs54koPBnC0SZnrx844nUpIiIJE0/QbwIWmNk8M8sH1gBPDN3BzCrMzKLLy6OP2+ac+6ZzbqZzbm70uOecc59L6AgSaPUiNTkTEf85a9A75/qAW4CniVw580vn3DYzW2tma6O7fRp4y8y2Aj8A1jjnMm7+o2RcHisqp6gdgoj4ylkvr4ST0zFPDlt375DlHwI/PMtjvAC8MOoKUyxcFeQfflPHntZjVJZN8LocEZFzpk/GDlMTbXKmq29ExC8U9MPMnFxEaFqx5ulFxDcU9DGEQ0E27ztM27Fur0sRETlnCvoYwoNNzrardbGIZD4FfQxLphczXU3ORMQnFPQxmBk1oSAbdrVyoqff63JERM6Jgn4E4VCQrt4BXmpQkzMRyWwK+hGsmBdpcqbpGxHJdAr6EeQHcli9uJxntzfTryZnIpLBFPRnEGly1sMbBw57XYqIyJgp6M/gsoVlBHKMZzR9IyIZTEF/BiXj8lhZWap5ehHJaAr6swiHguxpPc7u1mNelyIiMiYK+rM42eRMZ/UikqEU9GcxY9I4lkxXkzMRyVwK+jiEQ0E27z/MQTU5E5EMpKCPQ01VEOfguXo1ORORzKOgj8OS6cXMmDROl1mKSEZS0MfBzKipKmdjg5qciUjmUdDHKRyqoKt3gI1qciYiGUZBH6cVlVOYWBhgXV2T16WIiIyKgj5Oebk5XL6onGfrW9TkTEQyioJ+FGpCQdqO9/D6fjU5E5HMoaAfhdWLysjLNX14SkQyioJ+FIoLo03O6hX0IpI5FPSjpCZnIpJpFPSjVFMVaXKm6RsRyRQK+lGaPmkcS2eoyZmIZA4F/RjUVAXZsv8wrUfV5ExE0p+CfgzCoWiTs+06qxeR9KegH4PQtEiTs3V16mYpIulPQT8GZkY4FFSTMxHJCAr6MQqHgnT1DrBhV6vXpYiInJGCfoyWzxtscqZ5ehFJbwr6MRpscvbcdjU5E5H0pqA/B+Fok7MtanImImlMQX8OBpucrdf0jYikMQX9OZg42ORMQS8iaSyuoDezq81sh5k1mNntMbavNrN2M3sjevtWdP0sM3vezOrNbJuZfTXRA/DaVaEgew4ep6FFTc5EJD2dNejNLBe4B/gIEAJuMLNQjF03OOcujN6+HV3XB/xn51wVsBL40gjHZqyakJqciUh6i+eMfjnQ4Jzb45zrAR4CrovnwZ1z7znntkSXjwL1wIyxFpuOppUMNjnTd8mKSHqKJ+hnAAeG3G8kdlivMrOtZvaUmS0ZvtHM5gIXAa+NpdB0Fq6q4PUDR9TkTETSUjxBbzHWDb9wfAswxzl3AXA38NgpD2A2AXgE+FvnXEfMJzG72cxqzay2tTWzPm2qJmciks7iCfpGYNaQ+zOBd4fu4JzrcM4diy4/CeSZ2VQAM8sjEvK/cM49OtKTOOfuc85VO+eqy8rKRjkMb1VNmxhtcqagF5H0E0/QbwIWmNk8M8sH1gBPDN3BzCrMzKLLy6OP2xZddz9Q75z758SWnj4Gm5xt2HWQzp4+r8sRETnFWYPeOdcH3AI8TeTN1F8657aZ2VozWxvd7dPAW2a2FfgBsMY554BLgM8DVwy59PKapIzEY1eFgnT3DbBh10GvSxEROUUgnp2i0zFPDlt375DlHwI/jHHcRmLP8fvOsnlTKI42OfvwkgqvyxEROUmfjE2QvNwcLl+sJmcikn4U9AkUDgU5pCZnIpJmFPQJdNnCSJMzXX0jIulEQZ9AEwvzWDV/Kuvqmom8Fy0i4j0FfYKFQ0H2HjzO7lY1OROR9KCgT7CaqnIAntH0jYikCQV9gk0rGcf5M0o0Ty8iaUNBnwThUJA3Dhyh5WiX16WIiCjok+Fkk7P6Fq9LERFR0CfD4oqJzJysJmcikh4U9Ekw2ORsY4OanImI9xT0SRKuijQ5e3GnmpyJiLcU9EkytMmZiIiXFPRJkpebwxWLy3lue7OanImIpxT0SRQOVXC4s5fN+9TkTES8o6BPossWlZGfm8O6uiavSxGRLKagT6IJBQFWzS9VkzMR8ZSCPslqQkHebuukoUVNzkTEGwr6JAtXBQE1ORMR7yjok6yipJD3zSxhfb2CXkS8oaBPgXCVmpyJiHcU9CkQXhJpcvasmpyJiAcU9CmwKDiRWVPU5ExEvKGgTwEzI1xVwcaGgxzvVpMzEUktBX2K1ITK6ekbYMOuVq9LEZEso6BPkeVzp1AyLo91dZqnF5HUUtCnSGBIk7O+/gGvyxGRLKKgT6FwKKgmZyKScgr6FLp04WCTM119IyKpo6BPoQkFAS4+r5R19WpyJiKpo6BPsZqqIPvaOtmlJmcikiIK+hQLhyJNzjR9IyKpoqBPsWBxIRfMLFHQi0jKKOg9EA5Fm5x1qMmZiCSfgt4D4VAFAOvV5ExEUkBB74GFwQnMnlKk75IVkZRQ0HvAzKipCvLS7jY1ORORpFPQeyQcCqrJmZyVc479bZ2sq2tm877DvHPkBL1qoSGjFPC6gGy1bO5kJhXl8UxdM1cvneZ1OZJGDhzq5JU9bby6p41Xd7fxbvupb9qbwdQJBVQUF1JRUnjav8HiQqaVFDK+QL/eEhHX/wQzuxq4C8gFfuKc++6w7auBx4G90VWPOue+Hc+x2SqQm8MVi8p5bnsLff0DBHL14ipbNR7u5NU9h3hldyTc3zlyAoAp4/NZWTmFtZWlLJ1RQvuJXprau2hq76K5o4v32rs4cKiTTW8f4khn72mPO7EgQLAkEvrB4tP/IFSUFDKlKJ+cHEv1kCXFzhr0ZpYL3AOEgUZgk5k94ZyrG7brBufctWM8NiuFQ0Eeff0davcdZmVlqdflSIq8c+QEr0ZD/ZU9bTQejgT75KI8VlaWcvOllaysLGVB+YS4Q/hETz/NHV00dUT+EJz8N7q8q/kgLUe7GBjWeSMv1yifGP1jEP0jMG3Iq4JgceSWH9CJSCaL54x+OdDgnNsDYGYPAdcB8YT1uRzre0ObnCno/eu99hORUN/dxqt7DrH/UCcAk4ryWDFvCl/44DxWzS9lYfnEMZ9dj8vPZe7U8cydOn7EffoHHAePdfPesFcFkX9PUPduB8/Vt3Cit/+0Y6dOyD/tVcHgq4XB5YkFAcyy89WBc47Onn6O9/RxvLuf4919HOvu43h3H8d7IvfPvC5y7ISCAE/c8sGE1xdP0M8ADgy53wisiLHfKjPbCrwLfMM5t20Ux2al8YNNzuqa+W8frcraXxK/aWrvisyvR8/Y97VFgr1kXCTYb7x4LisrS1lcMfZgH4vcHDt5hs6s2Ps45+g40Rd5RdDRRVP7CZrau08uv9vexZb9hzkcY6pofH7uyVcFsd47qCgupHRCAblpMFWUqGA+PmQ53j6F4/JyGV8QYHxBLuPzA0woCDB1Qj5zCoqYOqEgKeONJ+hj/VSGD2kLMMc5d8zMrgEeAxbEeWzkScxuBm4GmD17dhxl+UM4FOTvfv0Wu1qOsTA40etyZAyaO/4U7K/uOcTeg8cBmFgYYMW8Uj6/cg6r5peyuKI4LULuTMyMkqI8SoryWFQx8v/Hrt5+Wjq6ea/9BE0dp746aGrv4tXdbbQc7aZv2FxRIMcon1hwynsHQ99DmFYyjvLiAgrzck85Ll2DeXx+gPEFASYUDO5z6n6nrCsIMD4/4Mn/gXiCvpFT//7PJHLWfpJzrmPI8pNm9iMzmxrPsUOOuw+4D6C6ujprevjWVEWCfl1ds4I+Q7R0dPHq3sibp6/taWPPKcE+hc+umM3KylKqpqV/sI9VYV4us0uLmF1aNOI+/QOOtmPdp79vEP13e9NRXtjRSmfP6VNFk4vymFSUT2dPdgZzosUT9JuABWY2D3gHWAN8ZugOZlYBNDvnnJktJ3J9fhtw5GzHZrtgcSEXzJrEM3XNfOny87wuR2JoPdo95Iy9jd2tkWCfUBBg+bwp3LA8Euyh6f4N9rHIzTHKiwspLy7kfTNj7+Oc42h3H83tkVcETR1dkeWOLjpO9J4WzEWDy6cE85DQ9kkwJ9pZg94512dmtwBPE7lE8gHn3DYzWxvdfi/waeCLZtYHnADWuMg3a8Q8NkljyVhXhYL8r6d30NzRFZk/FU8dPNbNa3sO8cqeg7y65xAN0e8OmFAQYNncyfxZ9SxWzS8lNK1Yl8WeIzOjuDCP4sI8FugVbdJYOn7TUXV1tautrfW6jJTZ2XyUq/7lRb7ziaV8dsUcr8vJOm3Hunlt76GTZ+w7myPBXpSfy7K5U1g1v5SVlaUsna5gl/RlZpudc9Wxtumjc2lgQflgk7NmBX0KHDrewx/2/ulyxx3NR4FIsFfPncL1F81gZWUp588oIU/BLj6goE8DZkY4FORfX9nH8e4+fXQ9wQ4f7znljH17UyTYx+XlUj13Mh+/cDorK0t530wFu/iTEiVNhENB7t+4lxd3tvKR89X75ly0d/by2t62aL+YQ2xv6sA5KMzLoXrOFL5x1bRosE/SJz4lKyjo00T1nEiTs3V1zQr6UWrv7OUPbx86+enT+miwFwRy+MCcyXy9ZiEr50fO2AsCuWd/QBGfUdCniUBuDlcsVpOzeHR09bIpeh37q3vb2PZuJNjzAzl8YPZk/vbKhayaX8oFsxTsIqCgTytXhYI8uuUdNr19mFXz1ftmuO6+fu55fjc/fqGB3n5Hfm4OF82exFevXMDKylIunDXptE9UioiCPq18aEEZ+YFIkzMF/ak27zvMbY+8SUPLMa67cDprls3motkKdpF4KOjTyPiCAJfML2VdfRN/f62anAEc7+7je8/s4Kcvv8204kIevHEZly8u97oskYyioE8z4VAFz//6j+xsPnbGplLZ4MWdrXzz0T/yzpET/PmqOdx69WIm6NJTkVHTO35ppqYqcra6rq7J40q8c6Szh2/8ait//sAfKAjk8Mu/XsW3r1uqkBcZI/3mpJny4kIunDWJdXXN3HLFAq/LSbmn/vgef//4Ng539vA3q+fzlSsXaB5e5Bwp6NNQOAubnLV0dPH3j7/F09uaWTqjmJ/91TKWTC/xuiwRX9DUTRoKh4IArKtr9riS5HPO8ctNB7jyn3/PCztauf0ji3nsby5RyIskkM7o09CC8gnMKS1ifX0zn1vp3yZn+9s6+eav3+SlhjaWz5vCdz95PpVlE7wuS8R3FPRpyMwIVwX5P6/s41h3n+/ehOwfcDz40l6+98wOAjk5fOcTS7lh2eyUfn+qSDbR1E2aCoeC9PQP8OLOVq9LSagdTUf55I9f5o5/r+eS+VNZ9/VL+eyKOQp5kSTy16mij3xgzmQmR5ucXeODJmdD2xdMLMzjBzdcxMfeN00fChNJAQV9moo0OQuyvr6Z3v6BjO6TvmX/YW57+E12tRzj+gun862PLWHK+HyvyxLJGpmbHlkgHCqn/UQvm94+5HUpY3K8u4///pttfOrHL3O8u48Hb1zGnWsuUsiLpJjO6NPYYJOz9XUtXDx/qtfljMqGXZH2BY2HT/D5lXO49epFTCzM87oskaykM/o0Nr4gwAfPm8q6+ibS8UvcY2nv7OW//Gorn7//D+TnRtoX/OP1SxXyIh7SGX2aC4eCPLe9hR3NR1lcUex1OWek9gUi6UlBn+aurCrHDNZta07boG/p6OJbj2/jd9uaWDK9mJ/+5TKWztAnW0XShYI+zZVPjDY5q2/my1emV5Mz5xy/qm3kjn+vo6tvgNuuXsxNH5qnr0EUSTMK+gxQUxVpctbU3kVFSXo0Odvf1sl//fUf2dhwUO0LRNKcTr0ywFWDTc7qvW9y1j/g+MmGPXz4zhd548AR7rh+KQ/dtFIhL5LGdEafAc4rn8Dc0iLW1zXzeQ+bnO1oOsqtj7zJ1gNHuGJxOd/5xFKmlYzzrB4RiY+CPgOYGeFQkJ+97E2Ts+6+fn70/G5+FG1fcNeaC/n4BdPVvkAkQ2jqJkOEQxX09A/w+x2pbXL2+v7DfOzujdz17C4+ev401n/9Mq67cIZCXiSD6Iw+Q/ypyVkTH31f8pucdfb08b2nd/Lgy3upKC7kgRuruWJxMOnPKyKJp6DPELk5xhWLg6yra0p6k7ONuw5y+6Nvqn2BiE9o6iaDhENBOrr62LQ3OU3OBtsXfO7+18jPzeH/3bxS7QtEfEBn9Bnk0oVTKQjksK6+mYvPS2yTs9+9FWlfcOi42heI+I3O6DNIUX60yVldc8KanLV0dLH2Xzez9udbKJ9YwONfuoRbr16skBfxEZ3RZ5hwKMiz21vY3nSUqmlj730Tq33Bf/rQvIz+ghMRiU1Bn2GurApi9kfW1TWPOehPaV8wdwrf/ZTaF4j4mYI+w5RNLIg0Oatr5iujbHLWP+B48KW9fP+ZneTmGHdcv5TPLJ+tL+YW8TkFfQYKh4L8z9/t4L32E3G3INjRdJTbHnmTN6LtC+64finTJ6l9gUg20IRsBhpscra+vuWs+/b0DXDn+p1ce/cG9h/q5K41F3L/X1Qr5EWySFxBb2ZXm9kOM2sws9vPsN8yM+s3s08PWfc1M9tmZm+Z2b+ZWXr02c1g88smMG/qeNbVnbmb5ev7D3Pt3Ru4c/0urjl/Guu+dqnaF4hkobMGvZnlAvcAHwFCwA1mFhphv38Cnh6ybgbwFaDaObcUyAXWJKb07DXY5OyV3Qc52tV72vbOnj7+8bd1fPLHL3O0q48HbqzmrjUXUTqhwINqRcRr8ZzRLwcanHN7nHM9wEPAdTH2+zLwCDB8PiEAjDOzAFAEvHsO9UpUOBSkt9/x+52nNjnbuOsgH77zRe7fuJfPrpjNM1+7VD1qRLJcPEE/Azgw5H5jdN1J0TP3TwD3Dl3vnHsH+B6wH3gPaHfOPRPrSczsZjOrNbPa1tbUdmjMRO+fPZkp4/NPTt+0d/Zy68OR9gWBnEj7gjuuP1/tC0QkrqCPNaE7/GOZdwK3Oef6TznQbDKRs/95wHRgvJl9LtaTOOfuc85VO+eqy8rK4igru0WanJXz/PYWfvvmu9T8y+95ZMs7fHH1fJ766odYUVnqdYkikibiubyyEZg15P5MTp9+qQYeir7JNxW4xsz6gDxgr3OuFcDMHgUuBn5+jnULkembhzc3csv/fZ3QtGIevHEZS2eUeF2WiKSZeIJ+E7DAzOYB7xB5M/UzQ3dwzs0bXDaznwK/dc49ZmYrgJVmVgScAK4EahNUe9a7dEEZly0sY0XlFG76UKXaF4hITGcNeudcn5ndQuRqmlzgAefcNjNbG91+7xmOfc3MHga2AH3A68B9CalcGJefy8/+arnXZYhImrNEdUFMpOrqaldbqxN/EZF4mdlm51x1rG16rS8i4nMKehERn1PQi4j4nIJeRMTnFPQiIj6noBcR8TkFvYiIz6XldfRm1gocAdqHrC45w/2hy1OBgwkoY/jzjXXfkbbFWn+mMQ6/rzFn15gTNd6RahrLfokac7J/xiPVNJb90nnMc5xzsRuFOefS8gbcF+/9Ycu1yXj+se470rZY6zVmjXmkMSdqvKMZ89n2S9SYk/0zztYxD72l89TNb0Zxf/i2ZDz/WPcdaVus9Rqzxjz8vpdjPtt+iRpzssc7msf105hPSsupm3NhZrVuhI8B+5XG7H/ZNl7QmBMpnc/oxyobm6ZpzP6XbeMFjTlhfHdGLyIip/LjGb2IiAyhoBcR8TkFvYiIz/k66M2s0szuj37LVVYws+vN7H+b2eNmdpXX9aSCmVWZ2b1m9rCZfdHrelLFzMab2WYzu9brWlLBzFab2Yboz3q11/WkgpnlmNl3zOxuM/uLsT5OxgW9mT1gZi1m9taw9Veb2Q4zazCz2wGcc3ucc1/wptLEGeWYH3PO3QTcCPxHD8pNiFGOud45txb4MyJfVJ+RRjPmqNuAX6a2ysQa5ZgdcAwoBBpTXWuijHLM1wEzgF7OZczJ+BRWMm/ApcD7gbeGrMsFdgOVQD6wFQgN2f6w13V7MObvA+/3uvZUjRn4OPAy8Bmva0/FmIEaYA2RP+jXel17isacE90eBH7hde0pGvPtwF9H9xlzjmXcGb1z7kXg0LDVy4EGFzmD7wEeIvKX0BdGM2aL+CfgKefcllTXmiij/Tk7555wzl0MfDa1lSbOKMd8ObAS+Axwk5ll3O8yjG7MzrmB6PbDQEEKy0yoUf6cG4mMF6B/rM8ZGOuBaWYGcGDI/UZghZmVAt8BLjKzbzrn/ocn1SVHzDEDXyZytldiZuc55+71orgkGennvBr4JJFf/idTX1ZSxRyzc+4WADO7ETg4JAT9YKSf8yeBDwOTgB96UFcyjfT7fBdwt5l9CHhxrA/ul6C3GOucc64NWJvqYlJkpDH/APhBqotJkZHG/ALwQmpLSZmYYz654NxPU1dKyoz0c34UeDTVxaTISGPuBM75fcaMfLkXQyMwa8j9mcC7HtWSKhqzxuxXGnOCx+yXoN8ELDCzeWaWT+RNqic8rinZNGaN2a805kSP2et3oMfwjvW/Ae/xp8uNvhBdfw2wk8g713/ndZ0as8asMWvM6TJmNTUTEfE5v0zdiIjICBT0IiI+p6AXEfE5Bb2IiM8p6EVEfE5BLyLicwp6ERGfU9CLiPicgl5ExOf+P3pMg2C1g8HpAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#seed\n",
    "np.random.seed(aem)\n",
    "\n",
    "# numbers N \n",
    "x_axis = np.array([10**x for x in range(1,7)])\n",
    "\n",
    "# means_array\n",
    "y_axis = np.array([np.random.rand(10**x).mean() for x in range(1,7)])\n",
    "\n",
    "plt.plot(x_axis,y_axis)\n",
    "plt.xscale('log')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96741fd4",
   "metadata": {},
   "source": [
    "# Problem 2-Solved"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5d6291d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "999.99788\n"
     ]
    }
   ],
   "source": [
    "########1D grid##########\n",
    "\"\"\"\n",
    "We assume it starts from position 0 every time.\n",
    "Thus for the calculation of square distance each time I just square the position (finalpos-0)^2\n",
    "\"\"\"\n",
    "mean_sd = 0\n",
    "exps = 100000\n",
    "t=1000\n",
    "step_length = 1\n",
    "for i in range(exps):\n",
    "    position = 0\n",
    "    for j in range(t):\n",
    "        move = random.choice(['left','right'])\n",
    "        if move=='left':\n",
    "            position-=step_length\n",
    "        elif move=='right':\n",
    "            position+=step_length\n",
    "    squared_displacement = position**2\n",
    "    mean_sd+=squared_displacement\n",
    "print(mean_sd/exps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1149935f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1003.50284\n"
     ]
    }
   ],
   "source": [
    "########2D grid##########\n",
    "\"\"\"\n",
    "We assume it starts from position (0,0) every time.\n",
    "Thus for the calculation of square distance each time I just find the length of vector (x,y) an square it. i.e. x^2+y^2\n",
    "\"\"\"\n",
    "mean_sd = 0\n",
    "exps = 100000\n",
    "t=1000\n",
    "for i in range(exps):\n",
    "    position = [0,0]\n",
    "    for j in range(t):\n",
    "        move = random.choice(['left','right','up','down'])\n",
    "        if move=='left':\n",
    "            position[0]-=1\n",
    "        elif move=='right':\n",
    "            position[0]+=1\n",
    "        elif move=='up':\n",
    "            position[1]+=1\n",
    "        elif move=='down':\n",
    "            position[1]-=1\n",
    "    squared_displacement = position[0]**2+position[1]**2\n",
    "    mean_sd+=squared_displacement\n",
    "print(mean_sd/exps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e5297519",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000.2664677330182\n"
     ]
    }
   ],
   "source": [
    "########2D-continuum##########\n",
    "\"\"\"\n",
    "We assume it starts from position (0,0) every time.\n",
    "Thus for the calculation of square distance each time I just find the length of vector (x,y) an square it. i.e. x^2+y^2\n",
    "\"\"\"\n",
    "mean_sd = 0\n",
    "exps = 100000\n",
    "t=1000\n",
    "for i in range(exps):\n",
    "    position = [0,0]\n",
    "    for j in range(t):\n",
    "        angle = (random.randint(0,359)/180)*m.pi\n",
    "        position[0]+=round(m.cos(angle),2)\n",
    "        position[1]+=round(m.sin(angle),2)\n",
    "    squared_displacement = position[0]**2+position[1]**2\n",
    "    mean_sd+=squared_displacement\n",
    "print(mean_sd/exps)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d97f67a2",
   "metadata": {},
   "source": [
    "# extra problem-solved"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5c92063f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[99.48187689000011, 200.65123740999965, 301.1835303899986, 399.76590905000256, 502.047257910001, 603.6320758399977, 704.0968663599992, 803.2281045099994, 904.2014723200033, 1004.5690302099986]\n"
     ]
    }
   ],
   "source": [
    "########2D-continuum##########\n",
    "\"\"\"\n",
    "We assume it starts from position (0,0) every time.\n",
    "Thus for the calculation of square distance each time I just find the length of vector (x,y) an square it. i.e. x^2+y^2\n",
    "\"\"\"\n",
    "mean_sd = 0\n",
    "exps = 10000\n",
    "t=1000\n",
    "averages = [0]*10\n",
    "for i in range(exps):\n",
    "    position = [0,0]\n",
    "    points = []\n",
    "    for j in range(1,t+1):\n",
    "        angle = (random.randint(0,359)/180)*m.pi\n",
    "        position[0]+=round(m.cos(angle),2)\n",
    "        position[1]+=round(m.sin(angle),2)\n",
    "        if j%100==0:\n",
    "            points.append(position[0]**2+position[1]**2)\n",
    "    for j in range(len(points)):\n",
    "        averages[j]+=points[j]/exps\n",
    "print(averages)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d1e307a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAdTklEQVR4nO3de7yVc97/8ddHDhNpisqhmGK6aTuz6YDB5MYwD3Xf93Bnhgklgxj8MDmNw3DLKaeRpJBEmqJyDLscJ7FSdNIUddeeUtsgCunw+f3xvcy9p/auvdfp2uu63s/HYz/WWt91XV2f75LP/vS9vuv7NXdHRETSYYu4AxARkeJR0hcRSRElfRGRFFHSFxFJESV9EZEU2TLuADanRYsW3rZt27jDEBEpKVOnTv3M3Vtu2N7gk37btm3JZDJxhyEiUlLM7H9ratfwjohIiijpi4ikiJK+iEiKKOmLiKSIkr6ISIo0+Nk7IiJpUX7TK3y28vuN2ls02ZrMNf+el2tsttI3s4fNbLmZzazWtoOZvWJm86LH5tXeu9LM5pvZXDM7vlr7IWY2I3rvXjOzvPRARCQhakr4m2rPRl2Gdx4FTtigrR9Q4e7tgYroNWZWBvQA9onOGWhmjaJzHgD6AO2jnw3/TBERKbDNJn13fwP4fIPmbsCw6PkwoHu19pHuvtrdFwDzgcPMbBegqbtP9rCA/2PVzhERkSLJ9kbuTu6+FCB6bBW1twYWVzuuMmprHT3fsL1GZtbHzDJmlqmqqsoyRBGREvLee0W5TL5n79Q0Tu+baK+Ruw9293J3L2/ZcqOlI0REkuObb+Cyy6BTp6JcLtukvywasiF6XB61VwK7VTuuDbAkam9TQ7uISHpNmgT77Qd33gnnnEOL7baq8bAWTbbO2yWznbI5HugJ9I8ex1Vrf8LMBgC7Em7Yvuvu68zsazPrBEwBfgvcl1PkIiKlasUKuPxyeOgh2HPPkPyPPppiLC252aRvZk8CRwMtzKwSuI6Q7EeZWS9gEXAKgLvPMrNRwGxgLXCBu6+L/qjzCDOBGgMvRj8iIuny7LPwu9/Bp5+GYZ0bboBtty3a5S1Mpmm4ysvLXUsri0jJq6qCiy6CkSNh333h4Yfh0EMLdjkzm+ru5Ru2axkGEZFCcocRI6BDBxgzBm68EaZOLWjC3xQtwyAiUiiLF8N558Hzz0PHjjB0KOyzT6whqdIXEcm39eth0KCQ4CdNgrvugrffjj3hgyp9EZH8mjcPzjkHXn8dunaFwYNhjz3ijuqfVOmLiOTD2rVw++2w//4wfXoYynnllQaV8EGVvohI7j74AHr1Cjdou3WDgQNh113jjqpGqvRFRLK1ejVcey2Ul4ebtqNGwTPPNNiED6r0RUSy8847cPbZMGcOnHFGuFm7445xR7VZqvRFROpj1Sq45BLo0gVWroQXXoDHHiuJhA+q9EVE6q6iIszMWbAAzj8f+veH7bePO6p6UdIXEdlArXvVrvyCzJZbwhtvwJFHxhBZ7pT0RUQ2UOtetU2ah5k6jRsXOaL80Zi+iEh9lHDCByV9EZF/1cBXHs6Vkr6IyA8WLYITT4w7ioJS0hcRWb8e7r8/LIj25ptxR1NQSvoikm5/+xscdRT07QudO8PMmbXuSZvPvWrjotk7IpJOa9aEDcmvvz7cnH3kEejZE8zIXNM27ugKRklfRNJn+vSwhMK0afBf/wV//jPsvHPcURWFhndEJD2++w6uvjoskLZkCYweHX5SkvBBlb6IpMVf/xqWP/7oIzjzzDC0s8MOcUdVdKr0RSTZVq6Eiy6CI46Ab76Bl14K4/cpTPigpC8iSfbKK7DvvmHMvm9fmDkTjj8+7qhipaQvIsnz+edw1llw3HHwox+Fuff33ltyK2IWgpK+iCTL009DWRkMHw5XXRVm6hx+eNxRNRi6kSsiyfDpp2EIZ8wYOOigMHZ/4IFxR9XgqNIXkdLmDo8+Ch06wHPPwS23wJQpSvi1UKUvIqVr4ULo0yfcsD3iCBgyBPbaK+6oGjRV+iJSetavh/vuCzNzJk8Oi6W9/roSfh2o0heR0jJnDvTuHb5sdcIJMGgQ/OQncUdVMnJK+mZ2CdAbcGAGcBawLfAU0BZYCJzq7l9Ex18J9ALWARe5+4Rcri8iyVXrPrWrviDz0Ufw2GNw+ulgFkN0pSvr4R0zaw1cBJS7+75AI6AH0A+ocPf2QEX0GjMri97fBzgBGGhmjXILX0SSqtZ9ardrDrNnwxlnKOFnIdcx/S2Bxma2JaHCXwJ0A4ZF7w8DukfPuwEj3X21uy8A5gOH5Xh9EUmjnXaKO4KSlXXSd/e/A3cAi4ClwAp3fxnYyd2XRscsBVpFp7QGFlf7IyqjNhERKZJchneaE6r3dsCuwHZmdvqmTqmhrcYdiM2sj5llzCxTVVWVbYgiUoq+/houuCDuKBIrl+GdY4EF7l7l7muAp4EuwDIz2wUgelweHV8J7Fbt/DaE4aCNuPtgdy939/KWLVvmEKKIlJQXXwz71D7wQNyRJFYuSX8R0MnMtjUzA7oCc4DxQM/omJ7AuOj5eKCHmW1jZu2A9sC7OVxfRJLiH/+A3/4WTjwxLIr29tuJ3qc2TllP2XT3KWY2GngfWAtMAwYDTYBRZtaL8IvhlOj4WWY2CpgdHX+Bu6/LMX4RKWXu8Je/hDVzvvgC/vjHsEjaNtuQ6Rx3cMlk7jUOqzcY5eXlnslk4g5DRPJtyZIwdj92bNi+cOhQ2H//uKNKDDOb6u7lG7ZrGQYRKS73kODLysJKmLffHpZSUMIvCi3DICLFs2BBWCDt1VfhqKPgoYegffu4o0oVVfoiUnjr1sE994QF0qZMCevlTJyohB8DVfoiUlizZ0OvXvDOO2F2zqBBsNtumz9PCkKVvogUxvffw5/+FHaxmjcPHn88bHKihB8rVfoikn+ZTKjuP/wQevQIQzutWm3+PCk4Vfoikj/ffANXXAEdO8Jnn8G4cfDkk0r4DYgqfRHJj9dfD5ubzJ8P55wDt90GzZrFHZVsQJW+iOTmq6/gvPPg6KPDNoYVFTB4sBJ+A6WkLyLZe/75sEDa4MFw6aUwYwb8/OdxRyWboOEdEdmkWrctXPctmTtOCUl/9Ogwji8Nnip9EdmkWrctbNQYrrsO3n9fCb+EqNIXkexdf33cEUg9qdIXEUkRJX0Rqd38+XFHIHmmpC8iG1u3Du68U8sdJ5CSvoj8q5kzoXNnuOwyOPZYWmxb860/bVtYmnQjV0SC1avhllvgf/4nfLFq5Eg49VQyZnFHJnmkpC8iYY37Xr1g1iz4zW/g7ruhRYu4o5IC0PCOSJqtWhW+Sdu5M6xYEZY+fvxxJfwEU6UvklYTJ4aF0T75BH73O7j1VmjaNO6opMBU6YukzYoVYZ/arl1hiy3gtdfggQeU8FNCSV8kTZ59FsrKYOhQuPzysMnJUUfFHZUUkZK+SBosXw6nnQYnnww77hhu3N52GzRuHHdkUmRK+iJJ5g4jRoTqfswYuPHGsJVheXnckUlMdCNXJKkWLw6bmzz/PHTqFIZ0ysrijkpipkpfJGnWr4dBg8I695MmwV13wVtvKeELoEpfJFnmzQvTMF9/HY49Nuxo1a5d3FFJA6JKXyQJ1q4NN2b33x+mTw9DOS+/rIQvG1GlL1LqPvggLKEwdSp07w733w+77hp3VNJAKemLlIha96pd9QWZxYth1Cj41a9AC6TJJuQ0vGNmzcxstJl9ZGZzzKyzme1gZq+Y2bzosXm14680s/lmNtfMjs89fJH0qHWv2u2aw+zZcMopSviyWbmO6d8DvOTuewMHAHOAfkCFu7cHKqLXmFkZ0APYBzgBGGhmjXK8vohA+MKVSB1knfTNrCnwM2AogLt/7+5fAt2AYdFhw4Du0fNuwEh3X+3uC4D5wGHZXl9EROovl0p/D6AKeMTMppnZEDPbDtjJ3ZcCRI+touNbA4urnV8ZtW3EzPqYWcbMMlVVVTmEKJIAX34ZbtSK5EEuSX9L4GDgAXc/CFhFNJRTi5oGG72mA919sLuXu3t5y5YtcwhRpMSNHRu+VDVs2GYPFamLXJJ+JVDp7lOi16MJvwSWmdkuANHj8mrH71bt/DbAkhyuL5Jcy5bBqafCf/wHtGoFU6bUuiet9qqV+sh6yqa7f2pmi81sL3efC3QFZkc/PYH+0eO46JTxwBNmNgDYFWgPvJtL8CKJ4x52rrr4Yli5Em6+OSyBvNVWZA6JOzhJglzn6V8IjDCzrYFPgLMI/3oYZWa9gEXAKQDuPsvMRhF+KawFLnD3dTleXyQ5Fi2Cc8+Fl16CLl3Ct2r33jvuqCRhckr67j4dqGmN1q61HH8zcHMu1xRJnB8WSPvDH0Klf++9cMEFYVcrkTzTN3JF4jR3LvTuHVbBPO44ePBBaNs27qgkwVRKiMRhzRro3x8OOABmzYJHHw3DOkr4UmCq9EWKbdq0MO9+2jT4z/8MC6TtvHPcUUlKqNIXKZbvvoOrr4ZDD4UlS2D06LCFoRK+FJEqfZFiePvtUN3PnQtnngkDBkDz5ps9TSTfVOmLFNLKlXDhhXDkkaHSnzABHnlECV9io6QvUigvvxz2qb3/fujbF2bODDN0RGKkpC+Sb59/DmedBccfD9tuC2++GebeN2kSd2QiSvoieTVmTFggbfhwuOqqMEPn8MPjjkrkn3QjVyQfPv00DOGMGQMHHRTm3B94YNxRiWxESV+kHmrdp/abL8k89xzccgtcdhlsqf+1pGHS30yReqh1n9ptm8EHH8BeexU3IJF60pi+SL4o4UsJUNIXEUkRJX2RulizJmxoIlLilPRFNmfq1LBezjXXxB2JSM6U9EVq8+230K8fdOwIy5fDM89on1opeZq9I1KTN94Im5vMmxcWSrvjDmjWjEz3uAMTyY0qfZHqvvoKzj8fjjoK1q6FV1+FIUOgWbO4IxPJCyV9kR+8+CLsu2/Yr/bii2HGDOha43bPIiVLwzsi//hHSPKPPw4dOoS17zt3jjsqkYJQpS/p5Q6jRoVEP3IkXHttWCBNCV8STJW+pNOSJWHsftw4KC8PY/f77x93VCIFp0pf0sUdhg4Nyx9PmAC33w6TJyvhS2qo0pf0+OQTOOccmDgxzM4ZMgR++tO4oxIpKlX6knzr1sHdd8N++8F774XZORMnKuFLKqnSl2SbNSt8uWrKFDjppJDw27SJOyqR2KjSl2T6/nu48cawi9XHH8MTT8CzzyrhS+qp0pfkee+9UN3PmAE9eoRNyVu2jDsqkQZBlb4kxzffwOWXQ6dO8PnnMH48PPmkEr5INTlX+mbWCMgAf3f3X5rZDsBTQFtgIXCqu38RHXsl0AtYB1zk7hNyvb6kU6171X57AJneveG22+DHP44hMpGGLR+V/u+BOdVe9wMq3L09UBG9xszKgB7APsAJwMDoF4ZIvdW6V22T5vDgg0r4IrXIKembWRvgJGBIteZuwLDo+TCge7X2ke6+2t0XAPOBw3K5voiI1E+ulf7dwBXA+mptO7n7UoDosVXU3hpYXO24yqhtI2bWx8wyZpapqqrKMURJHP2dEMla1knfzH4JLHf3qXU9pYY2r+lAdx/s7uXuXt5SN+HkB+7hxmxZWdyRiJSsXCr9w4GTzWwhMBL4uZk9Diwzs10Aosfl0fGVwG7Vzm8DLMnh+pImlZVw8snw619Du3ZxRyNSsrJO+u5+pbu3cfe2hBu0E939dGA80DM6rCcwLno+HuhhZtuYWTugPfBu1pFLOqxfD4MHwz77QEUF3HknTJ6svWpFslSIL2f1B0aZWS9gEXAKgLvPMrNRwGxgLXCBu68rwPUlKebPhz59YNIkOOYYeOgh2HNPADLX/HvMwYmUJnOvcVi9wSgvL/dMJhN3GFJMPyyQdu21sNVWYVPy3r3BarotJCI1MbOp7l6+YbuWYZCGZeZMOPvssJTCySfDwIHQusZJXiKSBS3DIA3D6tVw/fVw8MGwcGHYvnDsWCV8kTxTpS/xmzIlLJA2axacfjrcdRe0aBF3VCKJpEpf4rNqFVx6adiIfMUKeO45GD5cCV+kgFTpSzwmTgxbF37yCZx3HvTvD02bxh2VSOKp0pfi+vLLkOy7doUttoDXXgs3a5XwRYpCSV+KZ/z48CWrhx+GK66ADz8MG5SLSNEo6UvhLV8edrDq1g123DHcuL31VmjcOO7IRFJHSV8Kxx1GjAgLpD3zDPzpT5DJQPlG3xcRkSLRjVwpjMWLww3a558P2xcOHarVMUUaAFX6kl/r18OgQWHsftKksJzCW28p4Ys0EKr0JWu17lO7sgmZjh3D6phaBlmkQVHSl6xtcp/al1/WAmkiDZCGd6QwlPBFGiQlfcnO6tVxRyAiWVDSl/qbPBkOOijuKEQkC0r6UncrV8LFF8Phh4fF0kSk5CjpS9288grstx/ccw+cfz7MnKl9akVKkGbvyKZ98QVcdllYL+ff/g3eeAOOPBLQPrUipUiVvtTumWfCl6qGDYN+/WD69H8mfBEpTar0ZWPLlsGFF8Jf/gIHHhiWUjj44LijEpE8UKUv/8cdHnsMOnSAcePgppvg3XeV8EUSRJW+BIsWwbnnwksvQZcuYYG0vfeOOyoRyTNV+mm3fj3cf39YIO3NN+G++8KjEr5IIqnST7O5c6F377AK5nHHwYMPQtu2cUclIgWkSj+N1qyBW26BAw6AWbPgkUfCsI4SvkjiqdJPm2nToFev8PirX4XhnJ13jjsqESkSVfpp8d13cOWVcOihsGQJjB4dpmQq4Yukiir9NHjrrTB2P3cunHUW3HknNG8ed1QiEgNV+kn29dfQt2/4Fu1338GECWE5BSV8kdTKutI3s92Ax4CdgfXAYHe/x8x2AJ4C2gILgVPd/YvonCuBXsA64CJ3n5BT9AJsYtvCb1eQGTgQLroIbr4ZmjSJIToRaUhyqfTXAv/P3TsAnYALzKwM6AdUuHt7oCJ6TfReD2Af4ARgoJk1yiV4CWrdtrDxj8PQzj33KOGLCJBD0nf3pe7+fvT8a2AO0BroBgyLDhsGdI+edwNGuvtqd18AzAcOy/b6UkddusQdgYg0IHkZ0zeztsBBwBRgJ3dfCuEXA9AqOqw1sLjaaZVRW01/Xh8zy5hZpqqqKh8hiogIeUj6ZtYEGANc7O5fberQGtq8pgPdfbC7l7t7ecuWLXMNMbncwxerRETqKKekb2ZbERL+CHd/OmpeZma7RO/vAiyP2iuB3aqd3gZYksv1U23BgrB0wtlnxx2JiJSQrJO+mRkwFJjj7gOqvTUe6Bk97wmMq9bew8y2MbN2QHvg3Wyvn1rr1sG998K++8I778DAgdq2UETqLJcvZx0OnAHMMLPpUdtVQH9glJn1AhYBpwC4+ywzGwXMJsz8ucDd1+Vw/fSZMycsoTB5MvziFzBoEOy+O5m44xKRkpF10nf3t6h5nB6gay3n3AzcnO01U2vNGrjtNrjxRth+exg+HH7zG7DaPn4RkZppGYaGburUMG7/4Ydw6qlhgbRWrTZ/nohIDbQMQ0P17bfwhz9Ax45QVQVjx8JTTynhi0hOVOk3RG+8ERZImzcvjOHfcQc0axZ3VCKSAKr0G5KvvoLzz4ejjoK1a+HVV2HIECV8EckbJf2G4oUXwj61Dz4Il1wCM2ZA1xrvh4uIZE1JP26ffQZnnAEnnQRNm8Jf/woDBsB228UdmYgkkJJ+XNxh1CgoK4ORI+GPf4T33w83bkVECkQ3cuOwZEkYux83DsrLw9j9/vvHHZWIpIAq/WJyh6FDQ3U/YUL4wtXkyUr4IlI0qvSL5ZNPoE8fqKgIs3OGDIGf/jTuqEQkZVTpF9q6dXD33bDffvDuu2F2zsSJSvgiEgtV+nlS6z61368kc9clYXbOoEHQpk0M0YmIBEr6eVLrPrVbN4ERI+C007RAmojETkm/GH7967gjEBEBNKYvIpIqSvr58NprcUcgIlInSvq5WLECzj0Xjjkm7khEROpEST9bzz4bFkgbMgQuu4wW221V42Hap1ZEGhLdyK2vqir4/e/hySfD5uRPPw2HHaZ9akWkJKjSryv3kOjLymD0aLjhhrCV4WGHxR2ZiEidqdKvi8pKOO88eO65kOSHDg1VvohIiVGlvynr14dlE8rKwpo5AwaE9e6V8EWkRKnSr838+XDOOWE65jHHwEMPwZ57xh2ViEhOVOlvaO1auPPOsNzx+++HZF9RoYQvIomgSr+6GTOgVy947z04+WQYOBBat447KhGRvFGlD7B6NVx3HRxyCCxcGLYvHDtWCV9EEkeV/jvvhOp+9mw4/XS46y5o0SLuqERECiK9lf6qVXDppdClC3z1FTz/PAwfroQvIomWzkq/oiLMzFmwIMy/798fmjaNOyoRkYJLV6X/5Zch2R97LGy5Jbz+erhZq4QvIimRnqQ/blz4ktUjj8AVV8AHH8DPfhZ3VCIiRVX0pG9mJ5jZXDObb2b9Cn7BZcvgv/8buneHVq1gyhS49VZo3LjglxYRaWiKmvTNrBFwP/ALoAw4zczKCnIxd3j88VDdjx0LN90U5t8fckhBLiciUgqKfSP3MGC+u38CYGYjgW7A7LxeZc2aUNm/8AJ07hwWSOvQIa+XEBEpRcVO+q2BxdVeVwIdNzzIzPoAfQB23333+l9lq61gr73guOOgb19o1Ci7aEVEEqbYSd9qaPONGtwHA4MBysvLN3q/TgYMyOo0EZEkK/aN3Epgt2qv2wBLihyDiEhqFTvpvwe0N7N2ZrY10AMYX+QYRERSq6jDO+6+1sz6AhOARsDD7j6rmDGIiKRZ0ZdhcPcXgBeKfV0REUnTN3JFRERJX0QkTZT0RURSRElfRCRFzD277z4Vi5lVAf+b5ektgM/yGE4pUJ/TIW19Tlt/Ifc+/8TdW27Y2OCTfi7MLOPu5XHHUUzqczqkrc9p6y8Urs8a3hERSRElfRGRFEl60h8cdwAxUJ/TIW19Tlt/oUB9TvSYvoiI/KukV/oiIlKNkr6ISIokMukXffP1IjGz3cxskpnNMbNZZvb7qH0HM3vFzOZFj82rnXNl9DnMNbPj44s+N2bWyMymmdlz0etE99nMmpnZaDP7KPrv3TnJfTazS6K/0zPN7Ekz+1ES+2tmD5vZcjObWa2t3v00s0PMbEb03r1mVtMGVTVz90T9EJZs/hjYA9ga+AAoizuuPPVtF+Dg6Pn2wN8IG8zfBvSL2vsBt0bPy6L+bwO0iz6XRnH3I8u+Xwo8ATwXvU50n4FhQO/o+dZAs6T2mbCN6gKgcfR6FHBmEvsL/Aw4GJhZra3e/QTeBToTdiN8EfhFXWNIYqX/z83X3f174IfN10ueuy919/ej518Dcwj/w3QjJAmix+7R827ASHdf7e4LgPmEz6ekmFkb4CRgSLXmxPbZzJoSksNQAHf/3t2/JMF9Jizz3tjMtgS2Jeyol7j+uvsbwOcbNNern2a2C9DU3Sd7+A3wWLVzNiuJSb+mzddbxxRLwZhZW+AgYAqwk7svhfCLAWgVHZaUz+Ju4ApgfbW2JPd5D6AKeCQa0hpiZtuR0D67+9+BO4BFwFJghbu/TEL7W4P69rN19HzD9jpJYtKv0+brpczMmgBjgIvd/atNHVpDW0l9Fmb2S2C5u0+t6yk1tJVUnwlV78HAA+5+ELCK8M/+2pR0n6Mx7G6EIYxdge3M7PRNnVJDW8n0tx5q62dO/U9i0k/05utmthUh4Y9w96ej5mXRP/mIHpdH7Un4LA4HTjazhYShup+b2eMku8+VQKW7T4lejyb8Ekhqn48FFrh7lbuvAZ4GupDc/m6ovv2sjJ5v2F4nSUz6id18PbpDPxSY4+4Dqr01HugZPe8JjKvW3sPMtjGzdkB7wg2gkuHuV7p7G3dvS/hvOdHdTyfZff4UWGxme0VNXYHZJLfPi4BOZrZt9He8K+F+VVL7u6F69TMaAvrazDpFn9dvq52zeXHfzS7QHfITCTNbPgaujjuePPbrCMI/4z4Epkc/JwI7AhXAvOhxh2rnXB19DnOpxx3+hvgDHM3/zd5JdJ+BA4FM9N96LNA8yX0GbgA+AmYCwwkzVhLXX+BJwn2LNYSKvVc2/QTKo8/qY+DPRKsr1OVHyzCIiKRIEod3RESkFkr6IiIpoqQvIpIiSvoiIimipC8ikiJK+iIiKaKkLyKSIv8fzcUta8F9emAAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "t = np.arange(100,1001,100)\n",
    "A = np.vstack([t, np.ones(len(t))]).T\n",
    "m,c = np.linalg.lstsq(A, averages, rcond=None)[0]\n",
    "x = np.linspace(0,1000,100)\n",
    "y = m*x+c\n",
    "plt.plot(x, y, '-r', label='y=2x+1')\n",
    "plt.plot(t,averages,'s')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cd35bb4",
   "metadata": {},
   "source": [
    "# Problem 3- In Progress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c18c3f33",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "####histogram from uniform distribution######\n",
    "uniform_distribution = list(np.random.rand(10000))\n",
    "def formula(x):\n",
    "    y_min = 10\n",
    "    y_max = 10**6\n",
    "    gamma = 3\n",
    "    delta = 1-gamma\n",
    "    return ((y_max**delta-y_min**delta)*x+y_min**delta)**(1/delta)\n",
    "power_law_dist = [formula(x) for x in uniform_distribution]\n",
    "power_law_dist.sort(reverse=True)\n",
    "plt.plot(power_law_dist)\n",
    "plt.xlim(-100, 10000)\n",
    "plt.ylim(-100 ,1750)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "090722e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY0AAAD8CAYAAACLrvgBAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAASwUlEQVR4nO3df4xl5X3f8ffHu4E4xNQQj5317iIWa21rsdp1uCK4biwakrBGkcFRfixSAm1dre1iNU4itWxdyW4kpDa14wqlxlknFGhtMPEvVhY0JjSqWxUbz9obWH5sGAw2w252J0GyyQ+tvMu3f9wz3ptlmH24986dGc/7JV3dc7/nPOc852GWj855zp1JVSFJUouXLXcHJEmrh6EhSWpmaEiSmhkakqRmhoYkqZmhIUlqdtrQSHJzkqNJDgzUPp1kf/d6Ksn+rn5+kr8bWPfxgTYXJXkoyUySG5NkSc5IkrRk1jdscwvwe8Bt84Wq+pX55SQfAb4zsP0TVbV9gf3cBOwCvgLcDewA7nnJPZYkLZvTXmlU1ZeBZxda110t/DJw+2L7SLIBOLuq7q/+twlvA656yb2VJC2rliuNxfwUcKSqHh+obUnyDeC7wL+vqv8DbARmB7aZ7WoLSrKL/lUJZ5111kVvfOMbR+ymJK0t+/bt+8uqmhr3fkcNjav5+1cZh4HzquqvklwEfCHJhcBC8xcv+vtLqmoPsAeg1+vV9PT0iN2UpLUlybeWYr9Dh0aS9cAvABfN16rqGHCsW96X5Ang9fSvLDYNNN8EHBr22JKk5THKI7c/AzxWVd+/7ZRkKsm6bvkCYCvwzao6DDyX5JJuHuQa4K4Rji1JWgYtj9zeDtwPvCHJbJJ3dat28sIJ8LcBDyb5M+AzwHuqan4S/b3AHwAzwBP45JQkrTpZ6b8a3TkNSXrpkuyrqt649+s3wiVJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktTM0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktTM0JAkNTM0JEnNThsaSW5OcjTJgYHah5I8k2R/97piYN3uJDNJDia5fKB+UZKHunU3Jsn4T0eStJRarjRuAXYsUP9oVW3vXncDJNkG7AQu7Np8LMm6bvubgF3A1u610D4lSSvYaUOjqr4MPNu4vyuBO6rqWFU9CcwAFyfZAJxdVfdXVQG3AVcN2WdJ0jIZZU7jfUke7G5fndPVNgJPD2wz29U2dsun1heUZFeS6STTc3NzI3RRkjROw4bGTcDrgO3AYeAjXX2heYpapL6gqtpTVb2q6k1NTQ3ZRUnSuA0VGlV1pKpOVNXzwCeAi7tVs8DmgU03AYe6+qYF6pKkVWSo0OjmKOa9E5h/smovsDPJmUm20J/wfqCqDgPPJbmke2rqGuCuEfotSVoG60+3QZLbgUuBVyWZBT4IXJpkO/1bTE8B7waoqoeT3Ak8AhwHrquqE92u3kv/SayXA/d0L0nSKpL+w0wrV6/Xq+np6eXuhiStKkn2VVVv3Pv1G+GSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqZmhIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqZmhIUlqZmhIkpqdNjSS3JzkaJIDA7X/nOSxJA8m+XySV3b185P8XZL93evjA20uSvJQkpkkNybJkpyRJGnJtFxp3ALsOKV2L/CmqvqHwJ8DuwfWPVFV27vXewbqNwG7gK3d69R9SpJWuNOGRlV9GXj2lNqXqup49/ErwKbF9pFkA3B2Vd1fVQXcBlw1VI8lSctmHHMa/wK4Z+DzliTfSPK/k/xUV9sIzA5sM9vVFpRkV5LpJNNzc3Nj6KIkaRxGCo0kHwCOA5/sSoeB86rqzcBvAp9Kcjaw0PxFvdh+q2pPVfWqqjc1NTVKFyVJY7R+2IZJrgV+Hrisu+VEVR0DjnXL+5I8Abye/pXF4C2sTcChYY8tSVoeQ11pJNkB/FvgHVX1twP1qSTruuUL6E94f7OqDgPPJbmke2rqGuCukXsvSZqo015pJLkduBR4VZJZ4IP0n5Y6E7i3e3L2K92TUm8DfjvJceAE8J6qmp9Efy/9J7FeTn8OZHAeRJK0CqS7s7Ri9Xq9mp6eXu5uSNKqkmRfVfXGvV+/ES5JamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqZmhIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqdlpQyPJzUmOJjkwUDs3yb1JHu/ezxlYtzvJTJKDSS4fqF+U5KFu3Y1JMv7TkSQtpZYrjVuAHafUrgfuq6qtwH3dZ5JsA3YCF3ZtPpZkXdfmJmAXsLV7nbpPSdIKd9rQqKovA8+eUr4SuLVbvhW4aqB+R1Udq6ongRng4iQbgLOr6v6qKuC2gTaSpFVi2DmN11TVYYDu/dVdfSPw9MB2s11tY7d8al2StIqMeyJ8oXmKWqS+8E6SXUmmk0zPzc2NrXOSpNEMGxpHultOdO9Hu/ossHlgu03Aoa6+aYH6gqpqT1X1qqo3NTU1ZBclSeM2bGjsBa7tlq8F7hqo70xyZpIt9Ce8H+huYT2X5JLuqalrBtpIklaJ9afbIMntwKXAq5LMAh8E/iNwZ5J3Ad8Gfgmgqh5OcifwCHAcuK6qTnS7ei/9J7FeDtzTvSRJq0j6DzOtXL1er6anp5e7G5K0qiTZV1W9ce/Xb4RLkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqZmhIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmg0dGknekGT/wOu7Sd6f5ENJnhmoXzHQZneSmSQHk1w+nlOQJE3K+mEbVtVBYDtAknXAM8DngX8OfLSqPjy4fZJtwE7gQuC1wJ8keX1VnRi2D5KkyRrX7anLgCeq6luLbHMlcEdVHauqJ4EZ4OIxHV+SNAHjCo2dwO0Dn9+X5MEkNyc5p6ttBJ4e2Ga2q71Akl1JppNMz83NjamLkqRRjRwaSc4A3gH8UVe6CXgd/VtXh4GPzG+6QPNaaJ9VtaeqelXVm5qaGrWLkqQxGceVxtuBr1fVEYCqOlJVJ6rqeeATnLwFNQtsHmi3CTg0huNLkiZkHKFxNQO3ppJsGFj3TuBAt7wX2JnkzCRbgK3AA2M4viRpQoZ+egogyY8APwu8e6D8O0m207/19NT8uqp6OMmdwCPAceA6n5ySpNVlpNCoqr8FfuyU2q8tsv0NwA2jHFOStHz8RrgkqZmhIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqZmhIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGYjhUaSp5I8lGR/kumudm6Se5M83r2fM7D97iQzSQ4muXzUzkuSJmscVxr/tKq2V1Wv+3w9cF9VbQXu6z6TZBuwE7gQ2AF8LMm6MRxfkjQhS3F76krg1m75VuCqgfodVXWsqp4EZoCLl+D4kqQlMmpoFPClJPuS7Opqr6mqwwDd+6u7+kbg6YG2s13tBZLsSjKdZHpubm7ELkqSxmX9iO3fWlWHkrwauDfJY4tsmwVqtdCGVbUH2APQ6/UW3EaSNHkjXWlU1aHu/Sjwefq3m44k2QDQvR/tNp8FNg803wQcGuX4kqTJGjo0kpyV5BXzy8DPAQeAvcC13WbXAnd1y3uBnUnOTLIF2Ao8MOzxJUmTN8rtqdcAn08yv59PVdX/TPI14M4k7wK+DfwSQFU9nORO4BHgOHBdVZ0YqfeSpIkaOjSq6pvAP1qg/lfAZS/S5gbghmGPKUlaXn4jXJLUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktTM0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktRs6NBIsjnJnyZ5NMnDSX69q38oyTNJ9nevKwba7E4yk+RgksvHcQKSpMlZP0Lb48BvVdXXk7wC2Jfk3m7dR6vqw4MbJ9kG7AQuBF4L/EmS11fViRH6IEmaoKGvNKrqcFV9vVt+DngU2LhIkyuBO6rqWFU9CcwAFw97fEnS5I1lTiPJ+cCbga92pfcleTDJzUnO6WobgacHms3yIiGTZFeS6STTc3Nz4+iiJGkMRg6NJD8KfBZ4f1V9F7gJeB2wHTgMfGR+0wWa10L7rKo9VdWrqt7U1NSoXZQkjclIoZHkh+gHxier6nMAVXWkqk5U1fPAJzh5C2oW2DzQfBNwaJTjS5Ima5SnpwL8IfBoVf3uQH3DwGbvBA50y3uBnUnOTLIF2Ao8MOzxJUmTN8rTU28Ffg14KMn+rvbvgKuTbKd/6+kp4N0AVfVwkjuBR+g/eXWdT05J0uoydGhU1f9l4XmKuxdpcwNww7DHlCQtL78RLklqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqZmhIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSp2cRDI8mOJAeTzCS5ftLHlyQNb6KhkWQd8F+BtwPbgKuTbJtkHyRJw1s/4eNdDMxU1TcBktwBXAk8crqG9z16hFv+31O8LOFlgSRL3FVJ0qkmHRobgacHPs8CP3nqRkl2AbsAzjvvPAC+d6L462PHef754vmaQE8lSS8w6dBY6PLgBRFQVXuAPQC9Xq8Adrzpx9nxph9f2t5J0g+I/Oul2e+kJ8Jngc0DnzcBhybcB0nSkCYdGl8DtibZkuQMYCewd8J9kCQNaaK3p6rqeJL3AX8MrANurqqHJ9kHSdLwJj2nQVXdDdw96eNKkkbnN8IlSc0MDUlSM0NDktTM0JAkNTM0JEnNDA1JUrNUrexf5JRkDvhW9/FVwF8uY3dWCsfhJMeiz3HocxxOekNVvWLcO5349zReqqqaml9OMl1VveXsz0rgOJzkWPQ5Dn2Ow0lJppdiv96ekiQ1MzQkSc1WW2jsWe4OrBCOw0mORZ/j0Oc4nLQkY7HiJ8IlSSvHarvSkCQtI0NDktRsVYRGkh1JDiaZSXL9cvdn3JJsTvKnSR5N8nCSX+/q5ya5N8nj3fs5A212d+NxMMnlA/WLkjzUrbsxyUJ/YndFS7IuyTeSfLH7vFbH4ZVJPpPkse5n4y1rcSyS/Eb37+JAktuT/PBaGYckNyc5muTAQG1s557kzCSf7upfTXL+aTtVVSv6Rf+PNT0BXACcAfwZsG25+zXmc9wA/ES3/Argz4FtwO8A13f164H/1C1v68bhTGBLNz7runUPAG+h//fY7wHevtznN8R4/CbwKeCL3ee1Og63Av+yWz4DeOVaGwtgI/Ak8PLu853AP1sr4wC8DfgJ4MBAbWznDvwr4OPd8k7g06ft03IPSsOgvQX444HPu4Hdy92vJT7nu4CfBQ4CG7raBuDgQmNA/y8hvqXb5rGB+tXA7y/3+bzEc98E3Af8NCdDYy2Ow9nd/yxzSn1NjUUXGk8D59L/MvIXgZ9bS+MAnH9KaIzt3Oe36ZbX0/82fRbrz2q4PTX/QzNvtqv9QOouD98MfBV4TVUdBujeX91t9mJjsrFbPrW+mvwX4N8Azw/U1uI4XADMAf+tu1X3B0nOYo2NRVU9A3wY+DZwGPhOVX2JNTYOpxjnuX+/TVUdB74D/NhiB18NobHQfccfyOeEk/wo8Fng/VX13cU2XaBWi9RXhSQ/Dxytqn2tTRaorfpx6Kynf1vipqp6M/A39G9FvJgfyLHo7tdfSf92y2uBs5L86mJNFqit+nFoNMy5v+RxWQ2hMQtsHvi8CTi0TH1ZMkl+iH5gfLKqPteVjyTZ0K3fABzt6i82JrPd8qn11eKtwDuSPAXcAfx0kv/B2hsH6J/DbFV9tfv8GfohstbG4meAJ6tqrqq+B3wO+MesvXEYNM5z/36bJOuBfwA8u9jBV0NofA3YmmRLkjPoT9bsXeY+jVX3JMMfAo9W1e8OrNoLXNstX0t/rmO+vrN78mELsBV4oLtUfS7JJd0+rxlos+JV1e6q2lRV59P/7/y/qupXWWPjAFBVfwE8neQNXeky4BHW3lh8G7gkyY90/b8MeJS1Nw6Dxnnug/v6Rfr/5ha/AlvuSZ7GiaAr6D9R9ATwgeXuzxKc3z+hf0n4ILC/e11B/97ifcDj3fu5A20+0I3HQQaeAgF6wIFu3e9xmkmtlfoCLuXkRPiaHAdgOzDd/Vx8AThnLY4F8B+Ax7pz+O/0nw5aE+MA3E5/Lud79K8K3jXOcwd+GPgjYIb+E1YXnK5P/hoRSVKz1XB7SpK0QhgakqRmhoYkqZmhIUlqZmhIkpoZGpKkZoaGJKnZ/wf70RYf+eLf9wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#####actual power law######\n",
    "def power_func(y):\n",
    "    y_min = 10\n",
    "    y_max = 10**6\n",
    "    gamma = 3\n",
    "    delta = 1-gamma\n",
    "    C = delta*(1/(y_max**delta-y_min**delta))\n",
    "    return C*(y**(-gamma))  \n",
    "t = np.arange(10,10**6,10.0)\n",
    "plt.plot(t,power_func(t))\n",
    "plt.xlim(-100, 10000)\n",
    "plt.ylim(-100 ,1750)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b4ea95c",
   "metadata": {},
   "source": [
    "# Problem 4-Solved"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6b95bf6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#we denote the connections with a symmetric matrix of 10000x10000 \n",
    "#with zeros in the diagonal elements \n",
    "#if element 12 or 21 of the matrix has 1 it means that nod 1 is connected\n",
    "#to nod 2\n",
    "def simulation(n_nodes, one_prob):\n",
    "    z = np.random.choice([0,1],p = [1-one_prob,one_prob], size = [n_nodes,n_nodes])\n",
    "    np.fill_diagonal(z,0)\n",
    "    z = np.tril(z)\n",
    "    z = z+z.T\n",
    "    n_edges = np.sum(z,axis=1)\n",
    "    return n_edges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "90240be3",
   "metadata": {},
   "outputs": [],
   "source": [
    "######experiment######\n",
    "exps = 1000\n",
    "n_nodes = 10000\n",
    "probability = 0.15\n",
    "\n",
    "means = [0]*n_nodes\n",
    "mean_k = 0\n",
    "for i in range(exps):\n",
    "    x = simulation(n_nodes,probability)\n",
    "    mean_k+=sum(x)/n_nodes/exps\n",
    "    for j in range(n_nodes):\n",
    "        means[j]+=x[j]/exps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "27e1bc7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x26d921aa820>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(means, kind=\"kde\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "bf5e5ad6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1499.856805800002\n"
     ]
    }
   ],
   "source": [
    "print(mean_k)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f0129b8",
   "metadata": {},
   "source": [
    "# Problem 5-In Progress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba00336c",
   "metadata": {},
   "outputs": [],
   "source": [
    "########1-d case###########\n",
    "exps = 10000\n",
    "step_length = 1\n",
    "s_t = [0]*10\n",
    "for i in range(exps):\n",
    "    position = 0\n",
    "    min_pos = 0\n",
    "    max_pos = 0\n",
    "    for t in range(1,1001):\n",
    "        move = random.choice(['left','right'])\n",
    "        if move=='left':\n",
    "            position-=step_length\n",
    "        elif move=='right':\n",
    "            position+=step_length\n",
    "        if position<min_pos:\n",
    "            min_pos = position\n",
    "        elif position>max_pos:\n",
    "            max_pos = position\n",
    "        if t%100==0:\n",
    "            s_t[t//100-1]+= max_pos-min_pos+1   \n",
    "mean_s = np.array([(x/exps) for x in s_t])\n",
    "t = np.arange(100,1001,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85dbd786",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[15.9958 22.6733 27.6709 31.9216 35.7023 39.1191 42.2247 45.1201 47.8604\n",
      " 50.4545]\n",
      "[ 100  200  300  400  500  600  700  800  900 1000]\n"
     ]
    }
   ],
   "source": [
    "print(mean_s)\n",
    "print(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a3b0e670",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x26478e79a30>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(mean_s,t)\n",
    "plt.plot(mean_s,t,'s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0bbb4c28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",